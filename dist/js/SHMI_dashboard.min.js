	let PeakInterval = 15000;
	let updateIntervalA = 1000;
	let updateIntervalD = 1000;

	//==============================================================================
$( () => {
	//==============================================================================
		const digital_in_container = $("#ID_digital_in");
		const digital_out_container = $("#ID_digital_out");
		const analog_in_container = $("#ID_analog_in");
		const analog_out_container = $("#ID_analog_out");

		moment.locale("de");
	//==============================================================================
		function init() {
			let digital_in_append = '';
			let digital_out_append = '';
			let analog_in_append = '';
			let analog_out_append = '';

			// build interface
			$.getJSON( "./data/data.json", ( data ) => {

				$.each( data, ( id, val) => {

					if ( id.indexOf("SP") == -1){ // if not setpoint

						if ( id.indexOf("DI") != -1) {
							digital_in_append +=
								`<tr>
									<td id="TXT_${id}""></td>
									<td>
										<div class="digi_IO">
											<span class="digi_back"></span>
											<span id="ID_${id}_D" class="digi_in">&nbsp;</span>
										</div>
									</td>
									<td id="TS_${id}" class="value_out"></td>
								</tr>`;
						} else if ( id.indexOf("DO") != -1) {
							digital_out_append +=
								`<tr>
									<td id="TXT_${id}"></td>
									<td>
										<div class="digi_IO">
											<span class="digi_back"></span>
											<span id="ID_${id}_D" class="digi_out">&nbsp;</span>
										</div>
									</td>
									<td id="TS_${id}" class="value_out"></td>
								</tr>`;
						} else if ( id.indexOf("AI") != -1 && id.indexOf("SP") == -1) {
							analog_in_append +=
								`<tr>
									<td width="200em" id="TXT_${id}"></td>
									<td  class="value_out">
										<span class="${id}_SP"></span>
									</td>
									<td class="value_out value_big">
										<span class="${id}">0</span>
									</td>
									<td width="65%" style="padding-right: 1em;padding-left: 1em">
										<div class="progress">
											<div id="ID_${id}_M" class="progress-bar" role="progressbar"></div>
											<span id="ID_${id}_SP_SP" class="text-light progress-setpoint"></span>
											<span id="ID_${id}_P" class="progress-peak ${id}_P"></span>
											<span id="ID_${id}_L" class="progress-low ${id}_L"></span>
										</div>
									</td>
									<td  class="d-none"><input id="ID_${id}_LO" ><input analog" id="ID_${id}_PK" ></td>
									<td class="d-none d-md-block sparkline"><span id="ID_${id}_spark" class="peity-ai chart-ai">0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span></td>
								</tr>`;
						}  else if ( id.indexOf("AO") != -1) {
							analog_out_append +=
								`<tr>
									<td width="200em" id="TXT_${id}"></td>
									<td  class="value_out">
										<span class="${id}_SP"></span>
									</td>
									<td class="value_out value_big">
										<span class="${id}">0</span>
									</td>
									<td width="65%" style="padding-right: 1em;padding-left: 1em">
										<div class="progress">
											<div id="ID_${id}_M" class="progress-bar" role="progressbar"></div>
											<span id="ID_${id}_SP_SP" class="text-light progress-setpoint"></span>
											<span id="ID_${id}_P" class="progress-peak ${id}_P"></span>
											<span id="ID_${id}_L" class="progress-low ${id}_L"></span>
										</div>
									</td>
									<td class="d-none"><input id="ID_${id}_LO" ><input id="ID_${id}_PK" ></td>
									<td class="d-none d-md-block sparkline"><span id="ID_${id}_spark" class="peity-ao chart-ao">0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span></td>
								</tr>`;
						};
					};
				});

				// append content
				if (digital_in_append != '') {
					digital_in_container.append( digital_in_append )
					$('#ID_DI').removeClass('d-none')
				}
				if (digital_out_append != '') {
					digital_out_container.append( digital_out_append )
					$('#ID_DO').removeClass('d-none')
				}
				if (analog_in_append != '') {
					analog_in_container.append( analog_in_append )
					$('#ID_AI').removeClass('d-none')
				}
				if (analog_out_append != '') {
					analog_out_container.append( analog_out_append )
					$('#ID_AO').removeClass('d-none')
				}
				$('#ID_prefs').removeClass('d-none')
			})
				.done( () => {
					// UI
					$.getJSON( "./lng/de.json", ( data ) => {
						$.each( data, ( id, val) => {
							$("#TXT_" + id).each( function() {
								$(this).text(val);
							});
						});
					});
					// data points
					$.getJSON( "./lng/de_dp.json", ( data ) => {
						$.each( data, ( id, val) => {
							$("#TXT_" + id).each( function() {
								$(this).text(val);
							});
						});
					});
					// sparkline AI
					$(".peity-ai").peity("line", {
							fill: ["var(--sparkline_ai_fill)"],
							stroke: "var(--sparkline_ai_stroke)",
							strokeWidth: 2,
							min: 0,
							max: 100,
							width: 128
					});
					// sparkline AO
					$(".peity-ao").peity("line", {
							fill: ["var(--sparkline_ao_fill)"],
							stroke: "var(--sparkline_ao_stroke)",
							strokeWidth: 2,
							min: 0,
							max: 100,
							width: 128
					});

				});
		}
		init();
		/*
		$("#SparklineData").on('change', function() {
				let length = this.value -1;
				let data = '';

				for (let i = 0; i < length; i++) { data += '0,'}
				data += '0'

				updateSparklines(data);
		});
		*/

	//==============================================================================
		function updateValuesD() {
			let val, id, curent;
			let timeStamp

			parent.top.$("#IDdata").find("input").each( function() {
				val = this.value;
				id = this.id;

				curent = $(`#ID_${id}_D` ).css("opacity");
				if (curent != val) $(`#ID_${id}_D` ).css("opacity", val );

				timeStamp = moment.unix(  parent.top.$(`#${id}_TS_upd`).val() )
				$(`#TS_${id}` ).text( timeStamp.format('ll HH:mm:ss')  );

			});
			setTimeout(updateValuesD, updateIntervalD + 20);
		}
		$(() => { updateValuesD(); });

	//==============================================================================
		function updateValuesA() {
			let id, val, peak, low, curent;

			parent.top.$("#IDdata").find("input").each( function() {
				id = this.id;
				val = parseFloat( Round(this.value) );

				// fill forms --------------------------------------------------
				$("#IDAnalogIO").find( "." + id).each( function() {
					//this.value = parseFloat(val).toFixed(2);
					val = parseFloat(val).toFixed(2)

					if ( this.textContent != val)
						this.textContent = val;
				});

				// analog meter ------------------------------------------------
				curent = $(`#ID_${id}_M` ).css("width");
				if ( curent != val)
					$(`#ID_${id}_M` ).css("width", val + "%" );

				 // analog meter setpoint --------------------------------------
				curent = $(`#ID_${id}_M` ).css("width");
				if ( curent != val)
					$(`#ID_${id}_SP`).css("width", val + "%" );

				// analog meter peak -------------------------------------------
				peak = $(`#ID_${id}_PK`);
				if ( val >  peak.val() ) {
					peak.val( val );
					$(`#ID_${id}_P` ).css("width", peak.val()  + "%" );
				}

				// analog meter low --------------------------------------------
				low = $(`#ID_${id}_LO`);
				if ( parseFloat(val) <  low.val() ) // parseFloat ????
					low.val( val ); // min
				$(`#ID_${id}_L` ).css("width",    low.val()  + "%" );

			});
			setTimeout(updateValuesA, updateIntervalA);
		}
		 $(() => { updateValuesA(); });
		//==========================================================================
		function updateSparklines(sData) {
			let updatingChart, values;

			parent.top.$("#IDdata").find("input").each( function() {
				id = this.id;
				val = this.value;

				updatingChart = $(`#ID_${id}_spark` ).peity("line")

				if ( typeof sData == 'undefined' ) {
					values = updatingChart.text().split(",")
					values.shift()
					values.push(parseInt(val))

					updatingChart
						.text(values.join(",") )
						.change()
				} else {
					updatingChart
						.text( sData )
						.change()
				}

			});
			setTimeout(updateSparklines, updateIntervalA + 10);
		}
		 $(() => { updateSparklines(); });

		//==========================================================================
		$("#ID_PeakHold_Reset").click( () => {
			relasePeak();
		});
		//==========================================================================
		function relasePeak() {
			let id;

			parent.top.$("#IDdata").find("input").each( function() {
				id = this.id;

				$(`#ID_${id}_PK`).val( Number.MIN_VALUE );
				$(`#ID_${id}_LO`).val( Number.MAX_VALUE );
			});
			setTimeout(relasePeak, PeakInterval);
		}
		$(() => { relasePeak(); });

	//==============================================================================
});