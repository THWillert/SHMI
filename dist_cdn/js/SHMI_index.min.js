	//==========================================================================
$( () => {

	const updateRate = 500;
	let restart = false;

	//==========================================================================
		function WatchDog()
		{
			if ( restart === true ) {
				$('#ID_Connection_Status').removeClass('border-danger')
				$('#ID_Connection_Status').addClass('border-dark')
				updateVal();
			}
			setTimeout(WatchDog, updateRate * 2);
		}
		WatchDog();

	//==========================================================================
	// Time in footer
		dayjs.locale("de");

		function timeUpdate() {
			$("#IDtime").text( dayjs().format('dddd, D. MMMM, YYYY HH:mm') );

			setTimeout(timeUpdate, 10000);
		}
		timeUpdate();

	//==========================================================================
	// Data for all pages
		function writeIO() {
			$.getJSON( "./data/data.json", ( data ) => {
				var data_container = $("#IDdata");
				$.each( data, ( id, val) => {
					data_container.append(`
						<tr>
							<td>${id}</td>
							<td><input id="${id}"></td>
							<td><input id="${id}_old"></td>
							<td><input readonly id="${id}_TS_upd">
							</td><td id="TXT_${id}">
						</tr>`
					)
				});
			});
		}
		writeIO();

	//==========================================================================
	// Update values (shown in a hidden form - for debugging an as data for all
	// other pages
		function updateVal() {
			restart = false;

			$.getJSON( "./data/data.json", ( data ) => {
				$.each( data, ( id, val) => {
					$(`#${id}`).each( function() {
						$(this).val( val );

						if ( $(`#${id}_old`).val() != $(`#${id}`).val() )
							$(`#${id}_TS_upd`).val(  dayjs().unix() ); // ToDo - TIMESTAMP not local time

						$(`#${id}_old`).val( $(this).val() );
					});

					checkConnection();
				})
				setTimeout(updateVal, updateRate); // update intervall for all values
			})
				.fail(function() {
					console.log( "updateVal: error" );
					$('#ID_Connection_Status').text('Read error')
					$('#ID_Connection_Status').removeClass('border-dark')
					$('#ID_Connection_Status').addClass('border-danger')

					restart = true;
					return;
				});

		}
		$(() => {updateVal();});

		//======================================================================
		function checkConnection(){

			try {
				if ( document.getElementById('LIVE-BIT').value == 1 )
				{
					$('#ID_Connection_Status').text('Connection')
					$('#ID_Connection_Status').removeClass('border-dark')
					$('#ID_Connection_Status').addClass('border-success')
				} else {
					$('#ID_Connection_Status').removeClass('border-dark')
					$('#ID_Connection_Status').addClass('border-dark')
				}
			} catch (e) {  }; // ToDo - Error Message

			try {
				let diff = Math.abs( parseInt(document.getElementById('TIMESTAMP').value) - dayjs().unix() );

				$('.timeDiff').text( diff + 's' )

				if( diff > 2) {
					$('.timeDiff').removeClass('border-dark')
					$('.timeDiff').addClass('border-warning')
				} else {
					$('.timeDiff').removeClass('border-warning')
					$('.timeDiff').addClass('border-dark')
				}
			} catch (e) {  }; // ToDo - Error Message
		}

	//==========================================================================

	$('#version').prepend(
	"<li>jQuery " + jQuery.fn.jquery + "</li>" +
	"<li>Bootstrap " + $.fn.tooltip.Constructor.VERSION + "</li>" );

	//==========================================================================
});
